{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jelly\\\\Documents\\\\Python Files\\\\Web Scraper Project\\\\Web-Scraper\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State for storing fetched data from the server\n  const [data, setData] = useState([{}]);\n\n  // State for storing the job input value from the user\n  const [job, setJob] = useState('');\n\n  // State for storing the location input value from the user\n  const [location, setLocation] = useState('');\n\n  // useEffect to fetch initial data from the server when the component mounts\n  useEffect(() => {\n    fetch(\"http://localhost:5000/members\") // Make a GET request to the /members route\n    .then(res => res.json()) // Convert the response to JSON\n    .then(data => setData(data)) // Update the 'data' state with the fetched data\n    .catch(error => console.error(\"Error fetching members:\", error)); // Log any errors during the fetch\n  }, []); // Empty dependency array ensures this runs only once\n\n  // Function to handle the click event for submitting the job and location inputs\n  const click = () => {\n    fetch(\"http://localhost:5000/submit\", {\n      // Make a POST request to the /submit route\n      method: \"POST\",\n      // Specify the HTTP method\n      headers: {\n        \"Content-Type\": \"application/json\" // Indicate the data format being sent (JSON)\n      },\n      body: JSON.stringify({\n        // Convert job and location inputs into JSON format\n        job_value: job,\n        // 'job_value' key for the job input\n        location_value: location // 'location_value' key for the location input\n      })\n    }).then(response => response.json()) // Convert the response from the server to JSON\n    .then(data => {\n      alert(`Server received: ${data.received}`); // Display a message with the server's response\n    }).catch(error => console.error(\"Error sending data:\", error)); // Log any errors during the fetch\n  };\n\n  // Function to handle changes in the job input field\n  const changeJobVal = event => {\n    setJob(event.target.value); // Update the 'job' state with the current input value\n  };\n\n  // Function to handle changes in the location input field\n  const changeLocationVal = event => {\n    setLocation(event.target.value); // Update the 'location' state with the current input value\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Enter job title:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: changeJobVal,\n      value: job\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Enter location:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: changeLocationVal,\n      value: location\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: click,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), typeof data.members === 'undefined' ?\n    /*#__PURE__*/\n    // Check if 'members' data is undefined\n    _jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this) // Show a loading message if data is still being fetched\n    : data.members.map((member, i) =>\n    /*#__PURE__*/\n    // Map through 'members' and display each as a paragraph\n    _jsxDEV(\"p\", {\n      children: member\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }, this) // Use 'key' for unique identification of list items\n    )]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zD9nBP0NjIrVId+o2L8PGm2qcDA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","data","setData","job","setJob","location","setLocation","fetch","then","res","json","catch","error","console","click","method","headers","body","JSON","stringify","job_value","location_value","response","alert","received","changeJobVal","event","target","value","changeLocationVal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onClick","members","map","member","i","_c","$RefreshReg$"],"sources":["C:/Users/jelly/Documents/Python Files/Web Scraper Project/Web-Scraper/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nfunction App() {\r\n  // State for storing fetched data from the server\r\n  const [data, setData] = useState([{}])\r\n\r\n  // State for storing the job input value from the user\r\n  const [job, setJob] = useState('')\r\n\r\n  // State for storing the location input value from the user\r\n  const [location, setLocation] = useState('')\r\n\r\n  // useEffect to fetch initial data from the server when the component mounts\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:5000/members\") // Make a GET request to the /members route\r\n      .then((res) => res.json()) // Convert the response to JSON\r\n      .then((data) => setData(data)) // Update the 'data' state with the fetched data\r\n      .catch((error) => console.error(\"Error fetching members:\", error)) // Log any errors during the fetch\r\n  }, []) // Empty dependency array ensures this runs only once\r\n\r\n  // Function to handle the click event for submitting the job and location inputs\r\n  const click = () => {\r\n    fetch(\"http://localhost:5000/submit\", { // Make a POST request to the /submit route\r\n      method: \"POST\", // Specify the HTTP method\r\n      headers: {\r\n        \"Content-Type\": \"application/json\" // Indicate the data format being sent (JSON)\r\n      },\r\n      body: JSON.stringify({ // Convert job and location inputs into JSON format\r\n        job_value: job, // 'job_value' key for the job input\r\n        location_value: location // 'location_value' key for the location input\r\n      })\r\n    })\r\n      .then((response) => response.json()) // Convert the response from the server to JSON\r\n      .then((data) => {\r\n        alert(`Server received: ${data.received}`); // Display a message with the server's response\r\n      })\r\n      .catch((error) => console.error(\"Error sending data:\", error)) // Log any errors during the fetch\r\n  }\r\n\r\n  // Function to handle changes in the job input field\r\n  const changeJobVal = event => {\r\n    setJob(event.target.value); // Update the 'job' state with the current input value\r\n  }\r\n\r\n  // Function to handle changes in the location input field\r\n  const changeLocationVal = event => {\r\n    setLocation(event.target.value); // Update the 'location' state with the current input value\r\n  }\r\n\r\n  return (\r\n    <div className='App'>\r\n      {/* Input field for the job title */}\r\n      <p>\r\n        Enter job title: \r\n      </p>\r\n      <input onChange={changeJobVal} value={job} />\r\n\r\n      {/* Input field for the location */}\r\n      <p>\r\n        Enter location:\r\n      </p>\r\n      <input onChange={changeLocationVal} value={location} />\r\n\r\n      {/* Button to trigger the submission of inputs */}\r\n      <button onClick={click}>\r\n        Search\r\n      </button>\r\n\r\n      {/* Display fetched members data */}\r\n      {(typeof data.members === 'undefined') ? ( // Check if 'members' data is undefined\r\n        <p>Loading...</p> // Show a loading message if data is still being fetched\r\n      ) : (\r\n        data.members.map((member, i) => ( // Map through 'members' and display each as a paragraph\r\n          <p key={i}>{member}</p> // Use 'key' for unique identification of list items\r\n        ))\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}