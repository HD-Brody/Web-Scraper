{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jelly\\\\Documents\\\\Python Files\\\\Web Scraper Project\\\\Web-Scraper\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([{}]);\n  const [job, setJob] = useState('');\n  const [location, setLocation] = useState('');\n\n  // // useEffect to fetch initial data from the server when the component mounts\n  // useEffect(() => {\n  //   fetch(\"http://localhost:5000/members\") // Make a GET request to the /members route\n  //     .then((res) => res.json()) // Convert the response to JSON\n  //     .then((data) => setData(data)) // Update the 'data' state with the fetched data\n  //     .catch((error) => console.error(\"Error fetching members:\", error)) // Log any errors during the fetch\n  // }, []) // Empty dependency array ensures this runs only once\n\n  // Function to handle the click event for submitting the job and location inputs\n  const click = () => {\n    fetch(\"http://localhost:5000/submit\", {\n      // Make a POST request to the /submit route\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        // Convert job and location inputs into JSON format\n        job_value: job,\n        // 'job_value' key for the job input\n        location_value: location // 'location_value' key for the location input\n      })\n    }).then(response => response.json()) // Convert the response from the server to JSON\n    .then(data => {\n      console.log(\"Response from server:\", data);\n      setData(data.jobs_and_companies); // Update state with jobs and companies\n    }).catch(error => console.error(\"Error sending data:\", error));\n  };\n\n  // Function to handle changes in the job input field\n  const changeJobVal = event => {\n    setJob(event.target.value);\n  };\n\n  // Function to handle changes in the location input field\n  const changeLocationVal = event => {\n    setLocation(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Enter job title:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: changeJobVal,\n      value: job\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Enter location:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: changeLocationVal,\n      value: location\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: click,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), data.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No results yet. Submit a search!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this) : data.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Job Title:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 16\n        }, this), \" \", entry.job_title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Company:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 16\n        }, this), \" \", entry.company]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vzGothM6E/DkcHUz8TdVGHlO/Qg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","data","setData","job","setJob","location","setLocation","click","fetch","method","headers","body","JSON","stringify","job_value","location_value","then","response","json","console","log","jobs_and_companies","catch","error","changeJobVal","event","target","value","changeLocationVal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onClick","length","map","entry","index","job_title","company","_c","$RefreshReg$"],"sources":["C:/Users/jelly/Documents/Python Files/Web Scraper Project/Web-Scraper/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([{}])\r\n  const [job, setJob] = useState('')\r\n  const [location, setLocation] = useState('')\r\n\r\n  // // useEffect to fetch initial data from the server when the component mounts\r\n  // useEffect(() => {\r\n  //   fetch(\"http://localhost:5000/members\") // Make a GET request to the /members route\r\n  //     .then((res) => res.json()) // Convert the response to JSON\r\n  //     .then((data) => setData(data)) // Update the 'data' state with the fetched data\r\n  //     .catch((error) => console.error(\"Error fetching members:\", error)) // Log any errors during the fetch\r\n  // }, []) // Empty dependency array ensures this runs only once\r\n\r\n  // Function to handle the click event for submitting the job and location inputs\r\n  const click = () => {\r\n    fetch(\"http://localhost:5000/submit\", { // Make a POST request to the /submit route\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({ // Convert job and location inputs into JSON format\r\n        job_value: job, // 'job_value' key for the job input\r\n        location_value: location // 'location_value' key for the location input\r\n      })\r\n    })\r\n      .then((response) => response.json()) // Convert the response from the server to JSON\r\n      .then((data) => {\r\n        console.log(\"Response from server:\", data)\r\n        setData(data.jobs_and_companies); // Update state with jobs and companies\r\n      })\r\n      .catch((error) => console.error(\"Error sending data:\", error))\r\n  }\r\n\r\n  // Function to handle changes in the job input field\r\n  const changeJobVal = event => {\r\n    setJob(event.target.value)\r\n  }\r\n\r\n  // Function to handle changes in the location input field\r\n  const changeLocationVal = event => {\r\n    setLocation(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <div className='App'>\r\n      {/* Input field for the job title */}\r\n      <p>\r\n        Enter job title: \r\n      </p>\r\n      <input onChange={changeJobVal} value={job} />\r\n\r\n      {/* Input field for the location */}\r\n      <p>\r\n        Enter location:\r\n      </p>\r\n      <input onChange={changeLocationVal} value={location} />\r\n\r\n      {/* Button to trigger the submission of inputs */}\r\n      <button onClick={click}>\r\n        Search\r\n      </button>\r\n\r\n\r\n      {/* Display job titles and companies */}\r\n      {data.length === 0 ? (\r\n        <p>No results yet. Submit a search!</p>\r\n      ) : (\r\n        data.map((entry, index) => (\r\n          <div key={index}>\r\n            <p><strong>Job Title:</strong> {entry.job_title}</p>\r\n            <p><strong>Company:</strong> {entry.company}</p>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}